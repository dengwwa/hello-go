// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: proto/greet.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// 验证生成的代码版本是否足够新
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// 验证 runtime/protoimpl 是否版本足够新
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// HelloRequest 定义了问候请求的结构体
type HelloRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // 请求中包含的名字字段
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Reset 方法用于重置 HelloRequest 消息的状态
func (x *HelloRequest) Reset() {
	*x = HelloRequest{}
	mi := &file_proto_greet_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

// String 方法返回 HelloRequest 的字符串表示
func (x *HelloRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

// ProtoMessage 标记函数，标识这是一个 Protocol Buffer 消息
func (*HelloRequest) ProtoMessage() {}

// ProtoReflect 返回 HelloRequest 的反射信息
func (x *HelloRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_greet_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Descriptor 返回描述 HelloRequest 结构的原始字节描述和路径
// Deprecated: Use HelloRequest.ProtoReflect.Descriptor instead.
func (*HelloRequest) Descriptor() ([]byte, []int) {
	return file_proto_greet_proto_rawDescGZIP(), []int{0}
}

// GetName 获取 Name 字段的值，如果对象为 nil 则返回空字符串
func (x *HelloRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// HelloReply 定义了问候回复的结构体
type HelloReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"` // 回复中包含的消息字段
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Reset 方法用于重置 HelloReply 消息的状态
func (x *HelloReply) Reset() {
	*x = HelloReply{}
	mi := &file_proto_greet_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

// String 方法返回 HelloReply 的字符串表示
func (x *HelloReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

// ProtoMessage 标记函数，标识这是一个 Protocol Buffer 消息
func (*HelloReply) ProtoMessage() {}

// ProtoReflect 返回 HelloReply 的反射信息
func (x *HelloReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_greet_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Descriptor 返回描述 HelloReply 结构的原始字节描述和路径
// Deprecated: Use HelloReply.ProtoReflect.Descriptor instead.
func (*HelloReply) Descriptor() ([]byte, []int) {
	return file_proto_greet_proto_rawDescGZIP(), []int{1}
}

// GetMessage 获取 Message 字段的值，如果对象为 nil 则返回空字符串
func (x *HelloReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_proto_greet_proto protoreflect.FileDescriptor

// 文件的原始描述符字符串
const file_proto_greet_proto_rawDesc = "" +
	"\n" +
	"\x11proto/greet.proto\x12\x05greet\"\"\n" +
	"\fHelloRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\"&\n" +
	"\n" +
	"HelloReply\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage2?\n" +
	"\aGreeter\x124\n" +
	"\bSayHello\x12\x13.greet.HelloRequest\x1a\x11.greet.HelloReply\"\x00B\tZ\a.;greetb\x06proto3"

var (
	file_proto_greet_proto_rawDescOnce sync.Once
	file_proto_greet_proto_rawDescData []byte
)

// file_proto_greet_proto_rawDescGZIP 返回压缩后的原始描述符数据
func file_proto_greet_proto_rawDescGZIP() []byte {
	file_proto_greet_proto_rawDescOnce.Do(func() {
		file_proto_greet_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_greet_proto_rawDesc), len(file_proto_greet_proto_rawDesc)))
	})
	return file_proto_greet_proto_rawDescData
}

var file_proto_greet_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_proto_greet_proto_goTypes = []any{
	(*HelloRequest)(nil), // 0: greet.HelloRequest
	(*HelloReply)(nil),   // 1: greet.HelloReply
}
var file_proto_greet_proto_depIdxs = []int32{
	0, // 0: greet.Greeter.SayHello:input_type -> greet.HelloRequest
	1, // 1: greet.Greeter.SayHello:output_type -> greet.HelloReply
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

// init 初始化文件描述符
func init() { file_proto_greet_proto_init() }

// file_proto_greet_proto_init 初始化 greet.proto 文件的类型信息
func file_proto_greet_proto_init() {
	if File_proto_greet_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_greet_proto_rawDesc), len(file_proto_greet_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_greet_proto_goTypes,
		DependencyIndexes: file_proto_greet_proto_depIdxs,
		MessageInfos:      file_proto_greet_proto_msgTypes,
	}.Build()
	File_proto_greet_proto = out.File
	file_proto_greet_proto_goTypes = nil
	file_proto_greet_proto_depIdxs = nil
}
